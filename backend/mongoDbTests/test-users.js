const dotenv = require('dotenv');
dotenv.config({ path: '../.env' });
const axios = require('axios');

// Configura√ß√£o base
const BASE_URL = 'http://localhost:5000/api';

// Fun√ß√£o auxiliar para fazer requisi√ß√µes
async function makeRequest(method, url, data = null) {
  try {
    const config = {
      method,
      url: `${BASE_URL}${url}`,
      headers: {
        'Content-Type': 'application/json'
      }
    };
    
    if (data) {
      config.data = data;
    }
    
    const response = await axios(config);
    return response.data;
  } catch (error) {
    console.error(`Erro na requisi√ß√£o ${method} ${url}:`, error.response?.data || error.message);
    throw error;
  }
}

// Testes das funcionalidades de usu√°rio
async function testarFuncionalidadesUsuario() {
  console.log('üöÄ Iniciando testes das funcionalidades de usu√°rio...\n');

  try {
    // 1. Registrar usu√°rio professor
    console.log('1. Registrando usu√°rio professor...');
    const professor = await makeRequest('POST', '/users/registrar', {
      nome: 'Dr. Jo√£o Silva',
      email: 'joao.silva@universidade.edu.br',
      senha: 'senha123',
      tipo: 'professor',
      instituicao: 'Universidade Federal do ABC',
      departamento: 'Ci√™ncia da Computa√ß√£o',
      telefone: '(11) 99999-9999'
    });
    console.log('‚úÖ Professor registrado:', professor.usuario.nome);
    const professorId = professor.usuario._id;

    // 2. Registrar usu√°rio acad√™mico
    console.log('\n2. Registrando usu√°rio acad√™mico...');
    const academico = await makeRequest('POST', '/users/registrar', {
      nome: 'Maria Santos',
      email: 'maria.santos@universidade.edu.br',
      senha: 'senha456',
      tipo: 'academico',
      instituicao: 'Universidade Federal do ABC',
      departamento: 'Engenharia',
      telefone: '(11) 88888-8888'
    });
    console.log('‚úÖ Acad√™mico registrado:', academico.usuario.nome);

    // 3. Registrar usu√°rio de suporte
    console.log('\n3. Registrando usu√°rio de suporte...');
    const suporte = await makeRequest('POST', '/users/registrar', {
      nome: 'Carlos T√©cnico',
      email: 'carlos.tecnico@universidade.edu.br',
      senha: 'senha789',
      tipo: 'suporte',
      instituicao: 'Universidade Federal do ABC',
      departamento: 'TI',
      telefone: '(11) 77777-7777',
      nivel_suporte: 'nivel2',
      especialidades: ['hardware', 'software', 'rede']
    });
    console.log('‚úÖ Usu√°rio de suporte registrado:', suporte.usuario.nome);
    const suporteId = suporte.usuario._id;

    // 4. Listar todos os usu√°rios
    console.log('\n4. Listando todos os usu√°rios...');
    const todosUsuarios = await makeRequest('GET', '/users');
    console.log(`‚úÖ Total de usu√°rios: ${todosUsuarios.length}`);

    // 5. Filtrar usu√°rios por tipo
    console.log('\n5. Filtrando usu√°rios por tipo (suporte)...');
    const usuariosSuporte = await makeRequest('GET', '/users?tipo=suporte');
    console.log(`‚úÖ Usu√°rios de suporte: ${usuariosSuporte.length}`);

    // 6. Buscar usu√°rio por ID
    console.log('\n6. Buscando usu√°rio por ID...');
    const usuarioBuscado = await makeRequest('GET', `/users/${professorId}`);
    console.log('‚úÖ Usu√°rio encontrado:', usuarioBuscado.nome);

    // 7. Atualizar usu√°rio
    console.log('\n7. Atualizando telefone do professor...');
    const usuarioAtualizado = await makeRequest('PUT', `/users/${professorId}`, {
      telefone: '(11) 99999-0000'
    });
    console.log('‚úÖ Usu√°rio atualizado. Novo telefone:', usuarioAtualizado.usuario.telefone);

    // 8. Listar suporte por especialidade
    console.log('\n8. Listando suporte por especialidade (hardware)...');
    const suporteHardware = await makeRequest('GET', '/users/suporte/especialidade/hardware');
    console.log(`‚úÖ T√©cnicos de hardware: ${suporteHardware.length}`);

    // 9. Desativar usu√°rio
    console.log('\n9. Desativando usu√°rio de suporte...');
    const usuarioDesativado = await makeRequest('PATCH', `/users/${suporteId}/desativar`);
    console.log('‚úÖ Usu√°rio desativado:', usuarioDesativado.usuario.nome, '- Ativo:', usuarioDesativado.usuario.ativo);

    // 10. Reativar usu√°rio
    console.log('\n10. Reativando usu√°rio de suporte...');
    const usuarioReativado = await makeRequest('PATCH', `/users/${suporteId}/reativar`);
    console.log('‚úÖ Usu√°rio reativado:', usuarioReativado.usuario.nome, '- Ativo:', usuarioReativado.usuario.ativo);

    console.log('\nüéâ Todos os testes foram executados com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
  }
}

// Testes de valida√ß√£o
async function testarValidacoes() {
  console.log('\nüîç Testando valida√ß√µes...\n');

  try {
    // Teste 1: Registrar usu√°rio sem campos obrigat√≥rios
    console.log('1. Testando registro sem campos obrigat√≥rios...');
    try {
      await makeRequest('POST', '/users/registrar', {
        nome: 'Teste',
        email: 'teste@email.com'
        // Faltando senha, tipo e institui√ß√£o
      });
    } catch (error) {
      console.log('‚úÖ Valida√ß√£o funcionou - campos obrigat√≥rios');
    }

    // Teste 2: Registrar usu√°rio com tipo inv√°lido
    console.log('\n2. Testando registro com tipo inv√°lido...');
    try {
      await makeRequest('POST', '/users/registrar', {
        nome: 'Teste',
        email: 'teste2@email.com',
        senha: 'senha123',
        tipo: 'tipo_invalido',
        instituicao: 'Teste'
      });
    } catch (error) {
      console.log('‚úÖ Valida√ß√£o funcionou - tipo inv√°lido');
    }

    // Teste 3: Registrar usu√°rio de suporte sem n√≠vel
    console.log('\n3. Testando registro de suporte sem n√≠vel...');
    try {
      await makeRequest('POST', '/users/registrar', {
        nome: 'Suporte Teste',
        email: 'suporte.teste@email.com',
        senha: 'senha123',
        tipo: 'suporte',
        instituicao: 'Teste'
        // Faltando nivel_suporte
      });
    } catch (error) {
      console.log('‚úÖ Valida√ß√£o funcionou - n√≠vel de suporte obrigat√≥rio');
    }

    console.log('\n‚úÖ Testes de valida√ß√£o conclu√≠dos!');

  } catch (error) {
    console.error('‚ùå Erro durante testes de valida√ß√£o:', error.message);
  }
}

// Executar todos os testes
async function executarTodos() {
  console.log('='.repeat(60));
  console.log('üß™ TESTES DO SISTEMA DE USU√ÅRIOS - SoS-prof');
  console.log('='.repeat(60));
  
  await testarFuncionalidadesUsuario();
  await testarValidacoes();
  
  console.log('\n' + '='.repeat(60));
  console.log('üèÅ TESTES FINALIZADOS');
  console.log('='.repeat(60));
}

// Verificar se o script est√° sendo executado diretamente
if (require.main === module) {
  executarTodos().catch(console.error);
}

module.exports = {
  testarFuncionalidadesUsuario,
  testarValidacoes,
  executarTodos
};
