require('dotenv').config({ path: '../.env' });
const mongoose = require('mongoose');
const https = require('https');

async function debugAtlasConnection() {
  console.log('üîç DEBUG ESPEC√çFICO PARA MONGODB ATLAS\n');
  
  const mongoUri = process.env.MONGO_URI;
  
  // 1. Verificar se a URI est√° correta
  console.log('1. üìã AN√ÅLISE DETALHADA DA URI');
  console.log('-'.repeat(50));
  
  if (!mongoUri) {
    console.log('‚ùå MONGO_URI n√£o definida');
    return;
  }
  
  // Mascarar senha para log seguro
  const maskedUri = mongoUri.replace(/:([^:@]+)@/, ':***@');
  console.log(`URI (mascarada): ${maskedUri}`);
  
  // Extrair componentes
  const uriMatch = mongoUri.match(/mongodb\+srv:\/\/([^:]+):([^@]+)@([^\/]+)\/([^?]+)/);
  if (!uriMatch) {
    console.log('‚ùå Formato de URI inv√°lido');
    return;
  }
  
  const [, username, password, cluster, database] = uriMatch;
  console.log(`Usu√°rio: ${username}`);
  console.log(`Senha: ${password ? '‚úÖ Definida' : '‚ùå Vazia'}`);
  console.log(`Cluster: ${cluster}`);
  console.log(`Database: ${database}`);
  
  // 2. Verificar IP atual vs Atlas
  console.log('\n2. üåç VERIFICA√á√ÉO DE IP');
  console.log('-'.repeat(50));
  
  try {
    const getPublicIP = () => {
      return new Promise((resolve, reject) => {
        https.get('https://api.ipify.org', (res) => {
          let data = '';
          res.on('data', chunk => data += chunk);
          res.on('end', () => resolve(data.trim()));
        }).on('error', reject);
      });
    };
    
    const currentIP = await getPublicIP();
    console.log(`IP atual: ${currentIP}`);
    console.log(`IP configurado no Atlas: 179.245.42.121/32`);
    
    if (currentIP === '179.245.42.121') {
      console.log('‚úÖ IP atual corresponde ao configurado no Atlas');
    } else {
      console.log('‚ö†Ô∏è IP atual DIFERENTE do configurado no Atlas!');
      console.log('   Poss√≠veis causas:');
      console.log('   - IP din√¢mico mudou');
      console.log('   - Usando VPN');
      console.log('   - Proxy corporativo');
      console.log(`   Adicione o IP atual (${currentIP}) no Atlas`);
    }
  } catch (error) {
    console.log(`‚ùå Erro ao obter IP: ${error.message}`);
  }
  
  // 3. Teste de conectividade espec√≠fico
  console.log('\n3. üîå TESTE DE CONECTIVIDADE ATLAS');
  console.log('-'.repeat(50));
  
  const testConfigs = [
    {
      name: 'Configura√ß√£o Padr√£o',
      options: {
        serverSelectionTimeoutMS: 10000,
        connectTimeoutMS: 10000,
        socketTimeoutMS: 45000,
      }
    },
    {
      name: 'Timeout Estendido',
      options: {
        serverSelectionTimeoutMS: 30000,
        connectTimeoutMS: 30000,
        socketTimeoutMS: 60000,
      }
    },
    {
      name: 'Configura√ß√£o M√≠nima',
      options: {}
    }
  ];
  
  for (const config of testConfigs) {
    console.log(`\nTestando: ${config.name}`);
    try {
      console.log('  Conectando...');
      const startTime = Date.now();
      
      const conn = await mongoose.connect(mongoUri, config.options);
      const endTime = Date.now();
      
      console.log(`  ‚úÖ Sucesso em ${endTime - startTime}ms`);
      console.log(`  Host: ${conn.connection.host}`);
      console.log(`  Database: ${conn.connection.name}`);
      
      // Teste r√°pido de opera√ß√£o
      await conn.connection.db.admin().ping();
      console.log('  ‚úÖ Ping bem-sucedido');
      
      await mongoose.connection.close();
      console.log('  ‚úÖ Conex√£o fechada');
      
      console.log('\nüéâ CONEX√ÉO FUNCIONANDO! Use esta configura√ß√£o.');
      return;
      
    } catch (error) {
      console.log(`  ‚ùå Falhou: ${error.message}`);
      
      // An√°lise espec√≠fica do erro
      if (error.code === 'ENOTFOUND') {
        console.log('    ‚Üí Problema de DNS/conectividade');
      } else if (error.message.includes('authentication')) {
        console.log('    ‚Üí Problema de autentica√ß√£o (usu√°rio/senha)');
      } else if (error.message.includes('IP') || error.message.includes('whitelist')) {
        console.log('    ‚Üí Problema de IP whitelist');
      } else if (error.message.includes('timeout')) {
        console.log('    ‚Üí Timeout de conex√£o');
      }
    }
  }
  
  // 4. Verifica√ß√µes adicionais do Atlas
  console.log('\n4. üîß VERIFICA√á√ïES ATLAS ESPEC√çFICAS');
  console.log('-'.repeat(50));
  
  console.log('Verifique no MongoDB Atlas:');
  console.log('1. Database Access:');
  console.log('   - Usu√°rio "admin" existe?');
  console.log('   - Senha est√° correta?');
  console.log('   - Usu√°rio tem permiss√µes de Read/Write?');
  console.log('   - Usu√°rio pode acessar o database "sos-prof"?');
  console.log('');
  console.log('2. Network Access:');
  console.log('   - IP 179.245.42.121/32 est√° listado?');
  console.log('   - Entry est√° ativa (n√£o expirada)?');
  console.log('   - Tente temporariamente 0.0.0.0/0');
  console.log('');
  console.log('3. Cluster Status:');
  console.log('   - Cluster est√° online?');
  console.log('   - N√£o est√° em manuten√ß√£o?');
  console.log('   - Regi√£o est√° acess√≠vel?');
  
  // 5. Sugest√µes de resolu√ß√£o
  console.log('\n5. üõ†Ô∏è PR√ìXIMOS PASSOS SUGERIDOS');
  console.log('-'.repeat(50));
  console.log('1. Tente adicionar 0.0.0.0/0 temporariamente no Atlas');
  console.log('2. Verifique se o cluster n√£o est√° pausado');
  console.log('3. Teste com uma ferramenta externa (MongoDB Compass)');
  console.log('4. Verifique logs do Atlas (se dispon√≠vel)');
  console.log('5. Tente de uma rede diferente');
}

debugAtlasConnection().catch(console.error);
